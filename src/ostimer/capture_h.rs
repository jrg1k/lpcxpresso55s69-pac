#[doc = "Register `CAPTURE_H` reader"]
pub type R = crate::R<CaptureHSpec>;
#[doc = "Register `CAPTURE_H` writer"]
pub type W = crate::W<CaptureHSpec>;
#[doc = "Field `CAPTURE_VALUE` reader - A read reflects the value of the upper 10 bits of the central 42-bits EVTIMER at the time the last capture signal was generated by the CPU (using CMSIS C function \"__SEV();\")."]
pub type CaptureValueR = crate::FieldReader<u16>;
impl R {
    #[doc = "Bits 0:9 - A read reflects the value of the upper 10 bits of the central 42-bits EVTIMER at the time the last capture signal was generated by the CPU (using CMSIS C function \"__SEV();\")."]
    #[inline(always)]
    pub fn capture_value(&self) -> CaptureValueR {
        CaptureValueR::new((self.bits & 0x03ff) as u16)
    }
}
impl W {}
#[doc = "Capture High Register\n\nYou can [`read`](crate::Reg::read) this register and get [`capture_h::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`capture_h::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct CaptureHSpec;
impl crate::RegisterSpec for CaptureHSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`capture_h::R`](R) reader structure"]
impl crate::Readable for CaptureHSpec {}
#[doc = "`write(|w| ..)` method takes [`capture_h::W`](W) writer structure"]
impl crate::Writable for CaptureHSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets CAPTURE_H to value 0"]
impl crate::Resettable for CaptureHSpec {
    const RESET_VALUE: u32 = 0;
}

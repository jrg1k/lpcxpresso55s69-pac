#[doc = "Register `HCCONTROL` reader"]
pub type R = crate::R<HccontrolSpec>;
#[doc = "Register `HCCONTROL` writer"]
pub type W = crate::W<HccontrolSpec>;
#[doc = "Field `CBSR` reader - ControlBulkServiceRatio."]
pub type CbsrR = crate::FieldReader;
#[doc = "Field `CBSR` writer - ControlBulkServiceRatio."]
pub type CbsrW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
#[doc = "Field `PLE` reader - PeriodicListEnable."]
pub type PleR = crate::BitReader;
#[doc = "Field `PLE` writer - PeriodicListEnable."]
pub type PleW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `IE` reader - IsochronousEnable."]
pub type IeR = crate::BitReader;
#[doc = "Field `IE` writer - IsochronousEnable."]
pub type IeW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `CLE` reader - ControlListEnable."]
pub type CleR = crate::BitReader;
#[doc = "Field `CLE` writer - ControlListEnable."]
pub type CleW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `BLE` reader - BulkListEnable This bit is set to enable the processing of the Bulk list in the next Frame."]
pub type BleR = crate::BitReader;
#[doc = "Field `BLE` writer - BulkListEnable This bit is set to enable the processing of the Bulk list in the next Frame."]
pub type BleW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `HCFS` reader - HostControllerFunctionalState for USB 00b: USBRESET 01b: USBRESUME 10b: USBOPERATIONAL 11b: USBSUSPEND A transition to USBOPERATIONAL from another state causes SOFgeneration to begin 1 ms later."]
pub type HcfsR = crate::FieldReader;
#[doc = "Field `HCFS` writer - HostControllerFunctionalState for USB 00b: USBRESET 01b: USBRESUME 10b: USBOPERATIONAL 11b: USBSUSPEND A transition to USBOPERATIONAL from another state causes SOFgeneration to begin 1 ms later."]
pub type HcfsW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
#[doc = "Field `IR` reader - InterruptRouting This bit determines the routing of interrupts generated by events registered in HcInterruptStatus."]
pub type IrR = crate::BitReader;
#[doc = "Field `IR` writer - InterruptRouting This bit determines the routing of interrupts generated by events registered in HcInterruptStatus."]
pub type IrW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `RWC` reader - RemoteWakeupConnected This bit indicates whether HC supports remote wake-up signaling."]
pub type RwcR = crate::BitReader;
#[doc = "Field `RWC` writer - RemoteWakeupConnected This bit indicates whether HC supports remote wake-up signaling."]
pub type RwcW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `RWE` reader - RemoteWakeupEnable This bit is used by HCD to enable or disable the remote wake-up feature upon the detection of upstream resume signaling."]
pub type RweR = crate::BitReader;
#[doc = "Field `RWE` writer - RemoteWakeupEnable This bit is used by HCD to enable or disable the remote wake-up feature upon the detection of upstream resume signaling."]
pub type RweW<'a, REG> = crate::BitWriter<'a, REG>;
impl R {
    #[doc = "Bits 0:1 - ControlBulkServiceRatio."]
    #[inline(always)]
    pub fn cbsr(&self) -> CbsrR {
        CbsrR::new((self.bits & 3) as u8)
    }
    #[doc = "Bit 2 - PeriodicListEnable."]
    #[inline(always)]
    pub fn ple(&self) -> PleR {
        PleR::new(((self.bits >> 2) & 1) != 0)
    }
    #[doc = "Bit 3 - IsochronousEnable."]
    #[inline(always)]
    pub fn ie(&self) -> IeR {
        IeR::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 4 - ControlListEnable."]
    #[inline(always)]
    pub fn cle(&self) -> CleR {
        CleR::new(((self.bits >> 4) & 1) != 0)
    }
    #[doc = "Bit 5 - BulkListEnable This bit is set to enable the processing of the Bulk list in the next Frame."]
    #[inline(always)]
    pub fn ble(&self) -> BleR {
        BleR::new(((self.bits >> 5) & 1) != 0)
    }
    #[doc = "Bits 6:7 - HostControllerFunctionalState for USB 00b: USBRESET 01b: USBRESUME 10b: USBOPERATIONAL 11b: USBSUSPEND A transition to USBOPERATIONAL from another state causes SOFgeneration to begin 1 ms later."]
    #[inline(always)]
    pub fn hcfs(&self) -> HcfsR {
        HcfsR::new(((self.bits >> 6) & 3) as u8)
    }
    #[doc = "Bit 8 - InterruptRouting This bit determines the routing of interrupts generated by events registered in HcInterruptStatus."]
    #[inline(always)]
    pub fn ir(&self) -> IrR {
        IrR::new(((self.bits >> 8) & 1) != 0)
    }
    #[doc = "Bit 9 - RemoteWakeupConnected This bit indicates whether HC supports remote wake-up signaling."]
    #[inline(always)]
    pub fn rwc(&self) -> RwcR {
        RwcR::new(((self.bits >> 9) & 1) != 0)
    }
    #[doc = "Bit 10 - RemoteWakeupEnable This bit is used by HCD to enable or disable the remote wake-up feature upon the detection of upstream resume signaling."]
    #[inline(always)]
    pub fn rwe(&self) -> RweR {
        RweR::new(((self.bits >> 10) & 1) != 0)
    }
}
impl W {
    #[doc = "Bits 0:1 - ControlBulkServiceRatio."]
    #[inline(always)]
    pub fn cbsr(&mut self) -> CbsrW<HccontrolSpec> {
        CbsrW::new(self, 0)
    }
    #[doc = "Bit 2 - PeriodicListEnable."]
    #[inline(always)]
    pub fn ple(&mut self) -> PleW<HccontrolSpec> {
        PleW::new(self, 2)
    }
    #[doc = "Bit 3 - IsochronousEnable."]
    #[inline(always)]
    pub fn ie(&mut self) -> IeW<HccontrolSpec> {
        IeW::new(self, 3)
    }
    #[doc = "Bit 4 - ControlListEnable."]
    #[inline(always)]
    pub fn cle(&mut self) -> CleW<HccontrolSpec> {
        CleW::new(self, 4)
    }
    #[doc = "Bit 5 - BulkListEnable This bit is set to enable the processing of the Bulk list in the next Frame."]
    #[inline(always)]
    pub fn ble(&mut self) -> BleW<HccontrolSpec> {
        BleW::new(self, 5)
    }
    #[doc = "Bits 6:7 - HostControllerFunctionalState for USB 00b: USBRESET 01b: USBRESUME 10b: USBOPERATIONAL 11b: USBSUSPEND A transition to USBOPERATIONAL from another state causes SOFgeneration to begin 1 ms later."]
    #[inline(always)]
    pub fn hcfs(&mut self) -> HcfsW<HccontrolSpec> {
        HcfsW::new(self, 6)
    }
    #[doc = "Bit 8 - InterruptRouting This bit determines the routing of interrupts generated by events registered in HcInterruptStatus."]
    #[inline(always)]
    pub fn ir(&mut self) -> IrW<HccontrolSpec> {
        IrW::new(self, 8)
    }
    #[doc = "Bit 9 - RemoteWakeupConnected This bit indicates whether HC supports remote wake-up signaling."]
    #[inline(always)]
    pub fn rwc(&mut self) -> RwcW<HccontrolSpec> {
        RwcW::new(self, 9)
    }
    #[doc = "Bit 10 - RemoteWakeupEnable This bit is used by HCD to enable or disable the remote wake-up feature upon the detection of upstream resume signaling."]
    #[inline(always)]
    pub fn rwe(&mut self) -> RweW<HccontrolSpec> {
        RweW::new(self, 10)
    }
}
#[doc = "Defines the operating modes of the HC\n\nYou can [`read`](crate::Reg::read) this register and get [`hccontrol::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`hccontrol::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct HccontrolSpec;
impl crate::RegisterSpec for HccontrolSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`hccontrol::R`](R) reader structure"]
impl crate::Readable for HccontrolSpec {}
#[doc = "`write(|w| ..)` method takes [`hccontrol::W`](W) writer structure"]
impl crate::Writable for HccontrolSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets HCCONTROL to value 0"]
impl crate::Resettable for HccontrolSpec {
    const RESET_VALUE: u32 = 0;
}
